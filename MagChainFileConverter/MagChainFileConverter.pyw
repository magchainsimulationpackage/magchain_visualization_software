import sys, re
import PyQt5
from PyQt5.QtWidgets import *
from PyQt5 import uic
from PyQt5.QtCore import pyqtSlot, QDate, Qt
from PyQt5.QtGui import QIcon, QPixmap, QFont, QImage

import MDAnalysis as md

import os
from shutil import copyfile


current_time = lambda : time.time()

dir_principal = os.getcwd()

data_folder = dir_principal + '/Data'


class Window(QMainWindow): 
	def __init__(self):
		QMainWindow.__init__(self)

		os.chdir(data_folder)
		uic.loadUi('MagChainFileConverter.ui', self)

		#self.showMaximized()

		self.manage_files = ManageFiles()

		#Load files
		self.load_trajectory.clicked.connect(self.obrir_load_trajectory)

		#Choose folder
		self.choose_folder.clicked.connect(self.obrir_choose_folder)

		#Convert files
		self.convert.clicked.connect(self.convert_files)


	#Load files
	def obrir_load_trajectory(self):
		self.manage_files.openFileNameDialog(self.loaded_trajectory)

	#Choose folder
	def obrir_choose_folder(self):
		self.manage_files.openFolderDialog(self.folder)

	#File conversion

	def convert_files(self):

		input_filename = self.loaded_trajectory.text()
		output_filename = self.output_filename.text()

		choose_folder = self.folder.text()

		pdb_too = self.also_pdb.isChecked()

		if input_filename == '':
			QMessageBox.warning(self, 'Warning!', 'You must load the trajectory file first!')	

		elif output_filename == '':
			QMessageBox.warning(self, 'Warning!', 'You must give a name to the converted file!')

		else:

			self.bar_label.setText('Converting to xyz...')

			os.chdir(data_folder)

			topology_file = open('topology.xyz', 'w') #temporal file

			input_file = open(input_filename, 'r')
			output_file = open('converted' + '.xyz', 'w')


			counter = 0
			N = 0

			color_arrays_tot = []
			color_arrays = []

			total_lines = len(input_file.readlines())

			input_file.seek(0)

			for line in input_file:
				
				self.progressBar.setValue(counter/ total_lines * 100)

				cols = line.split()

				if counter == 0: #N keeps in time as the initial N part
					N = cols[0]

				if len(cols) == 1: #First line N part every frame only
					output_file.write(N + '\n')

				elif len(cols) == 3: #Comment line
					output_file.write('#File generated by MagChain File Converter\n')

				if len(cols) > 3: #trajectories
					
					part_in_chain = int(cols[4])
					part_in_lateral = int(cols[5])

					if part_in_chain == 1: #No change need to be made as it is not in a chain
						output_file.write('1 %s %s %s\n' % (cols[1], cols[2], cols[3]))

						color_arrays.append(1)

					elif part_in_chain % 2 == 0: #Center of mass in the point of contact of the two middle particles
						for i in range(int((part_in_chain) / 2)):
							z_right = float(cols[3]) + (i + 0.5)
							z_left = float(cols[3]) - (i + 0.5)

							output_file.write('2 %s %s %s\n' % (cols[1], cols[2], z_right))
							output_file.write('2 %s %s %s\n' % (cols[1], cols[2], z_left))

							color_arrays.append(-1)
							color_arrays.append(-1)

					elif part_in_chain % 2 != 0: #Centre of mass in the middle particle

						#Write the middle particle
						output_file.write('2 %s %s %s\n' % (cols[1], cols[2], cols[3]))
						color_arrays.append(-1)

						for i in range(int((part_in_chain - 1) / 2)):
							z_right = float(cols[3]) + (i + 1)
							z_left = float(cols[3]) - (i + 1)

							output_file.write('2 %s %s %s\n' % (cols[1], cols[2], z_right))
							output_file.write('2 %s %s %s\n' % (cols[1], cols[2], z_left))

							color_arrays.append(-1)
							color_arrays.append(-1)


				if counter == 0:
					topology_file.write(N + '\n')

				elif counter == 1:
					topology_file.write('#File generated by MagChain File Converter\n')

				elif counter < int(N) + 2:
					topology_file.write('1 %s %s %s\n' % (cols[1], cols[2], cols[3]))

				if len(cols) == 1 and len(color_arrays) != 0: #To color particles in chain and isolated
					color_arrays_tot.append(color_arrays)
					color_arrays = []

				counter += 1

			#Append the last one as it won't read N

			color_arrays_tot.append(color_arrays)

			input_file.close()
			output_file.close()
			topology_file.close()

			colors = color_arrays_tot

			self.progressBar.setValue(0)

			if pdb_too == True:

				self.bar_label.setText('Converting to PDB file...')

				os.chdir(data_folder)

				topology = 'topology.xyz'
				trajectory = 'converted' + '.xyz'

				U = md.Universe(topology, trajectory)

				U.add_TopologyAttr('tempfactors')

				i = 0

				pdbtrj = 'converted' + '.pdb'

				frames = len(U.trajectory)

				with md.Writer(pdbtrj, multiframe=True, bonds=None, n_atoms=U.atoms.n_atoms) as PDB:

					for t in U.trajectory:
						
						self.progressBar.setValue(i / frames * 100)
						
						U.atoms.tempfactors = colors[i]
						PDB.write(U.atoms)

						i += 1	

						self.progressBar.setValue(i / frames * 100)

				self.progressBar.setValue(0)

			#Copy the output files int the desired folder
			os.chdir(dir_principal)

			if choose_folder != '':
				os.chdir(choose_folder)

			copyfile(data_folder + '/converted.xyz', output_filename + '.xyz')

			if pdb_too == True:
				copyfile(data_folder + '/converted.pdb', output_filename + '.pdb')

			self.bar_label.setText('')
			QMessageBox.information(self, 'Information', 'Files successfully converted!')		

	#close event
	def closeEvent(self, event):
		result = QMessageBox.question(self, 'Leaving...','Do you want to exit?', QMessageBox.Yes | QMessageBox.No)
		if result == QMessageBox.Yes:

			os.chdir(data_folder)

			if os.path.exists('converted.xyz'): os.remove('converted.xyz')
			if os.path.exists('topology.xyz'): os.remove('topology.xyz')
			if os.path.exists('converted.pdb'): os.remove('converted.pdb')

			event.accept()	
		else:
			event.ignore()


class ManageFiles(QFileDialog):
	def __init__(self):
		QFileDialog.__init__(self)

		self.title = 'Save files'
		self.left = 10
		self.top = 10
		self.width = 640
		self.height = 400 

		self.initUI()

	def initUI(self):
		self.setWindowTitle(self.title)
		self.setGeometry(self.left, self.top, self.width, self.height)

	def saveFileDialog(self, name):
		options = QFileDialog.Options()
		options |= QFileDialog.DontUseNativeDialog

		fileName, _ = QFileDialog.getSaveFileName(self, 'Save files') 

		if fileName:
			os.chdir(data_folder)
			if os.path.exists('%s.png' % name): copyfile('%s.png' % name, fileName + '.png')
			else: QMessageBox.warning(self, 'Warning!', 'The plot doesn\'t exist!') 

	def openFileNameDialog(self, name):
		options = QFileDialog.Options()
		options |= QFileDialog.DontUseNativeDialog

		fileName, _ = QFileDialog.getOpenFileName(self,"QFileDialog.getOpenFileName()", "","All Files (*);;Python Files (*.py)", options=options)

		if fileName:
			name.setText(fileName)

	def openFolderDialog(self, name):
		options = QFileDialog.Options()
		options |= QFileDialog.DontUseNativeDialog

		fileName = str(QFileDialog.getExistingDirectory(self, 'Select folder', options=options))

		if fileName:
			name.setText(fileName)

		
app = QApplication(sys.argv)
_window=Window()
_window.show()
app.exec_()